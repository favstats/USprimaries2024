---
title: "2024 US Presidential Primaries"
format:
  html:
    theme: lumen
---

<style>
    body .main-container {
        max-width: 1920px !important;
    }
</style>



```{r echo=FALSE, results='asis'}
shiny::HTML('
<style>
#overlay {
  position: fixed;
  display: none;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.5);
  z-index: 2;
  cursor: pointer;
  text-align: center;
  padding-top: 10%;
}

#text {
  position: relative;
  top: 50%;
  left: 50%;
  font-size: 20px;
  color: black;
  transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  width: 50%;
}
</style>

<div id="overlay" onclick="off()">
  <div id="text">
    <img src="wtm_logo_2020.png" alt="Logo" style="width:200px;height:200px;">
    <h2>Welcome to the 2024 US Presidential Primaries Dashboard</h2>
    <p>This dashboard aggregates data from the <a href="https://www.facebook.com/ads/library/" target="_blank">Meta Ad Library</a> to show how citizens are targeted during the 2024 US Presidential Primaries.</p>
    <p>If you want to know more about Who Targets Me and our work on ad transparency, visit us on <a href="https://www.whotargets.me/" target="_blank">whotargets.me</a>!</p>
  </div>
</div>

<script>
window.onload = function() {
  var popupLastShown = localStorage.getItem("popupLastShown");
  var now = new Date().getTime();

  if (!popupLastShown || now - popupLastShown > 60*60*1000) {  // 60*60*1000 milliseconds = 1 hour
    document.getElementById("overlay").style.display = "block";
    localStorage.setItem("popupLastShown", now);
  }
}

function off() {
  document.getElementById("overlay").style.display = "none";
}
</script>
')




```


```{r setup, include=FALSE}
election_title <- "2023-24 US Primaries election"
the_country <- "US"


## Global options
knitr::opts_chunk$set(
    cache = F, 
    echo = F, 
    warning = F, 
    message = F, 
    cache.lazy = FALSE
)


# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)



options(scipen = 999)
# print(getwd())
here::here("")
# prCint(getwd())

```


```{r}


# source("../Candidate_utils.R")
source("../utils.R")
```



```{r}
election_dat90 <- readRDS("../data/election_dat90.rds") %>% 
    rename(internal_id = page_id,
           Candidate = party) 

election_dat30 <- readRDS("../data/election_dat30.rds") %>% 
    rename(internal_id = page_id,
           Candidate = party) # %>% 
  # mutate(Candidate = case_when(
  #   str_detect(internal_id, "638633769597292") ~ "ASh",
  #   T ~ Candidate 
  # )) %>% 
  # filter(!(Candidate %in% c("Vlada Crne Gore", "Drugo"))) %>% 
  # left_join(Candidate_dict) %>% 
  # mutate(Candidate = coalition)


election_dat7 <- readRDS("../data/election_dat7.rds") %>% 
    rename(internal_id = page_id,
           Candidate = party)  # %>% 
  # mutate(Candidate = case_when(
  #   str_detect(internal_id, "638633769597292") ~ "ASh",
  #   T ~ Candidate 
  # )) %>% 
  # filter(!(Candidate %in% c("Vlada Crne Gore", "Drugo")))  %>% 
  # left_join(Candidate_dict) %>% 
  # mutate(Candidate = coalition)

# saveRDS(election_dat30, "../data/election_dat30.rds")
# saveRDS(election_dat7, "../data/election_dat7.rds")

fin <- (as.Date(election_dat30$ds[1])-lubridate::days(1))
begin7 <- fin-lubridate::days(6)
begin30 <- fin-lubridate::days(29)
begin90 <- fin-lubridate::days(89)


last7days_string <- paste0(create_date(begin7), " - ", paste(create_date(fin), lubridate::year(fin)))
last30days_string <- paste0(create_date(begin30), " - ", paste(create_date(fin), lubridate::year(fin)))
last90days_string <- paste0(create_date(begin90), " - ", paste(create_date(fin), lubridate::year(fin)))


the_currency <- election_dat30 %>% 
  count(main_currency, sort = T) %>% 
  slice(1) %>% 
  pull(main_currency)

if(the_currency == "EUR"){
  currency_symbol <- "â‚¬"
} else if(the_currency == "USD"){
  currency_symbol <- "$"
} else {
  currency_symbol <- "CURRENCY"
}

color_dat <- election_dat30 %>% 
  select(Candidate, colors = color) %>% 
  distinct()

saveRDS(color_dat, "../data/color_dat.rds")
```




```{r}

total_spend_id <- election_dat30 %>% 
    filter(main_currency == the_currency) %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(Candidate) %>% 
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
  ungroup() 
```



```{r}
sum90 <- election_dat90 %>% 
    filter(main_currency == the_currency) %>% 
    distinct(internal_id, .keep_all = T) %>% 
    summarize(total_spend_formatted = sum(total_spend_formatted),
              total_num_ads = sum(total_num_ads))

sum30 <- election_dat30 %>% 
    filter(main_currency == the_currency) %>% 
    distinct(internal_id, .keep_all = T) %>% 
    summarize(total_spend_formatted = sum(total_spend_formatted),
              total_num_ads = sum(total_num_ads))

sum7 <- election_dat7 %>% 
    filter(main_currency == the_currency) %>% 
    distinct(internal_id, .keep_all = T) %>% 
    summarize(total_spend_formatted = sum(total_spend_formatted),
              total_num_ads = sum(total_num_ads))

add_ribbons <- function(x, adv, col) {
   x %>% 
  # tab_options(table.width = pct(100)) %>%
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = col,
      weight = px(18.5),
      style = "solid"
    ),
    locations = cells_body(
      columns = `Number of Advertisers`,
      rows = adv
    ))
}

add_ribbons2 <- function(x, adv, col) {
   x %>% 
  # tab_options(table.width = pct(100)) %>%
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = col,
      weight = px(18.5),
      style = "solid"
    ),
    locations = cells_body(
      columns = `Number of Ads`,
      rows = adv
    ))
}
```


This section shows *total* and *daily spending* of political candidates in the run-up to the `r election_title` for the latest available data.

## Total Spend

```{r}
get_table_dat <- function(x, var) {
    

x %>% 
    filter(main_currency == the_currency) %>% 
        distinct(internal_id, .keep_all = T) %>% 
    group_by({{ var }}) %>% 
    summarize(total_num_ads = n()) %>% 
    drop_na() %>% 
    mutate(total_num_ads = scales::comma(total_num_ads)) %>%
    pivot_wider(names_from = {{ var }}, values_from = total_num_ads) %>% 
    mutate(`Candidate_col` = "Number of Advertisers") %>% 
    bind_rows(x %>% 
    filter(main_currency == the_currency) %>% 
        distinct(internal_id, .keep_all = T) %>% 
        group_by({{ var }}) %>% 
        arrange(desc(total_spend_formatted)) %>% 
        slice(1:3) %>% 
        mutate(total_spend_formatted = scales::comma(total_spend_formatted)) %>%
        mutate(n_words = str_count(page_name, " ")) %>% 
        mutate(lab = paste0(page_name, " (",currency_symbol, total_spend_formatted, ")")) %>%
        select({{ var }}, lab) %>% 
        drop_na() %>% 
        summarize(lab = paste0("<br>", 1:n(), ". ", lab, collapse = "")) %>% 
        pivot_wider(names_from = {{ var }}, values_from = lab) %>% 
        mutate(`Candidate_col` = "Top Spenders"))  %>% 
    bind_rows(
        x %>% 
            distinct(internal_id, .keep_all = T) %>% 
            group_by({{ var }}) %>% 
            summarize(total_num_ads = sum(total_num_ads)) %>% 
            drop_na() %>% 
            mutate(total_num_ads = scales::comma(total_num_ads)) %>% 
            pivot_wider(names_from = {{ var }}, values_from = total_num_ads) %>% 
            mutate(`Candidate_col` = "Number of Ads")) %>% 
    bind_rows(
        x %>% 
            distinct(internal_id, .keep_all = T) %>% 
            group_by({{ var }}) %>% 
            summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
            mutate(total_spend_formatted = scales::comma(total_spend_formatted)) %>% 
        mutate(total_spend_formatted = paste0(currency_symbol, total_spend_formatted)) %>% 
            drop_na() %>% 
            pivot_wider(names_from = {{ var }}, values_from = total_spend_formatted) %>% 
            mutate(`Candidate_col` = "Total Spend") ) %>% 
    t() %>% 
    as.data.frame() %>% 
    rownames_to_column("Candidate_col") %>% 
    set_names(.[nrow(.),] %>% as.character()) %>% 
    slice(1:(n()-1)) 
    
}

```



::: {.panel-tabset}

### `r last90days_string` (Last 90 days)

In total, political candidates spent `r paste0(currency_symbol, scales::comma_format()(sum90$total_spend_formatted))` and ran `r sum90$total_num_ads` ads on Meta in this period.


```{r}

the_table90 <- get_table_dat(election_dat90, Candidate) %>% 
  arrange(desc(parse_number(`Total Spend`))) 


add_ribbons_code <- the_table90 %>%
  left_join(color_dat %>% mutate(Candidate_col = Candidate)) %>% 
  mutate(ribbons_code = sprintf("add_ribbons(\"%s\", \"%s\")", Candidate_col, colors)) %>%
  pull(ribbons_code) %>%
  # paste(collapse = "\n") %>%
  paste(collapse = "%>%")  # Add pipe after each ribbon

eval(parse(text = paste0("gt(the_table90, rowname_col = 'Candidate_col') %>% fmt_markdown(columns = everything()) %>% cols_align(align = \"center\") %>% gtExtras::gt_theme_538() %>% ", add_ribbons_code)))
```



### `r last30days_string` (Last 30 days)


In total, political candidates spent `r paste0(currency_symbol, scales::comma_format()(sum30$total_spend_formatted))` and ran `r sum30$total_num_ads` ads on Meta in this period.


```{r}


the_table30 <- get_table_dat(election_dat30, Candidate) %>% 
  arrange(desc(parse_number(`Total Spend`))) 


add_ribbons_code <- the_table30 %>%
  left_join(color_dat %>% mutate(Candidate_col = Candidate)) %>% 
  mutate(ribbons_code = sprintf("add_ribbons(\"%s\", \"%s\")", Candidate_col, colors)) %>%
  pull(ribbons_code) %>%
  # paste(collapse = "\n") %>%
  paste(collapse = "%>%")  # Add pipe after each ribbon

eval(parse(text = paste0("gt(the_table30, rowname_col = 'Candidate_col') %>% fmt_markdown(columns = everything()) %>% cols_align(align = \"center\") %>% gtExtras::gt_theme_538() %>% ", add_ribbons_code)))

```




### `r last7days_string` (Last 7 days)

In total, political candidates spent `r paste0(currency_symbol,scales::comma_format()(sum7$total_spend_formatted))` and ran `r sum7$total_num_ads` ads on Meta in this period



```{r}

the_table7 <- get_table_dat(election_dat7, Candidate) %>% 
  arrange(desc(parse_number(`Total Spend`))) 

saveRDS(the_table7, "../data/the_table7.rds")
the_table7 <- readRDS("../data/the_table7.rds")

add_ribbons_code <- the_table7 %>%
  left_join(color_dat %>% mutate(Candidate_col = Candidate)) %>% 
  mutate(ribbons_code = sprintf("add_ribbons(\"%s\", \"%s\")", Candidate_col, colors)) %>%
  pull(ribbons_code) %>%
  # paste(collapse = "\n") %>%
  paste(collapse = "%>%")  # Add pipe after each ribbon

eval(parse(text = paste0("gt(the_table7, rowname_col = 'Candidate_col') %>% fmt_markdown(columns = everything()) %>% cols_align(align = \"center\") %>% gtExtras::gt_theme_538() %>% ", add_ribbons_code)))

```

::: 



::: {.panel-tabset}


### Cumulative

```{r, out.width="100%"}
more_data <- readr::read_rds("../lifelong/US.rds")  %>%
    mutate(date_produced = lubridate::ymd(date)) %>%
  drop_na(date_produced) %>% 
    janitor::clean_names()%>% #rename(advertiser_id = page_id) %>%
    mutate(spend = readr::parse_number(as.character(amount_spent_eur))) %>%
    # mutate(spend = ifelse(spend == 100, 50, spend)) %>%
    # distinct(page_id, .keep_all = T) %>%
    filter(str_detect(page_name, "Global Space Conference on Climate Change|de Alliantie|PvdA - GroenLinks", negate = T)) %>%
    mutate(page_id = as.character(page_id)) %>% 
  # filter(cntry == "NL") %>% 
  filter(date_produced >= lubridate::as_date("2023-06-01"))


# me_advertisers <- read_csv("../data/wtm-advertisers-gr-2023-05-20T08_49_00.571Z.csv")
hc_data_cum_raw <-  more_data %>%
  # mutate(advertiser_id = as.character(advertiser_id)) %>%
    left_join(election_dat30 %>%
                distinct(internal_id, Candidate) %>% 
                  select(page_id = internal_id, Candidate)) %>%
    drop_na(Candidate) %>%
    group_by(date_produced, Candidate) %>%
    summarize(spend  = sum(spend)) %>%
    ungroup() %>%
  group_by(Candidate) %>%
  mutate(total_spend = max(spend)) %>%
  ungroup()  %>%
  left_join(color_dat) %>%
  mutate(Candidate = as.factor(Candidate)) %>%
  mutate(Candidate = fct_reorder(Candidate, total_spend))

# saveRDS(hc_data, "../data/hc_data.rds")

color_order <- hc_data_cum_raw %>%
  distinct(Candidate, .keep_all = T) %>%
  arrange(Candidate) %>%
  pull(colors)

# more_data %>% 
  # mutate(date_produced = lubridate::ymd(date)) %>%
  # drop_na(date_produced) %>% 
  # janitor::clean_names() %>% 
  # distinct(cntry, date_produced, .keep_all = T) %>% 
  # count(date_produced) %>%
  # ggplot(aes(date_produced, n)) +
  # geom_col() +
  # theme_minimal() +
  # labs(y = "How many Countries", x = "For each date")


```



```{r, out.width="100%"}


hc_data_cumfb <- hc_data_cum_raw %>%
  mutate(Date = date_produced) %>%
  group_by(Candidate) %>%  # Assuming you have a 'Candidate' column
  arrange(Date)  %>%
 mutate(Daily_Diff = if_else(row_number() == 1, lead(spend) - spend, spend - lag(spend)),
         `Daily Spend` = cumsum(Daily_Diff)) %>%
  # mutate(`Daily Spend` = spend - first(spend) + first(spend)) %>% 
  ungroup() %>% 
  #   mutate(`Daily Spend` = spend)
  # # mutate(`Daily Spend` = spend - first(spend)) %>%
  # # ungroup() %>%
  # mutate(`Daily Spend` = spend - lag(spend, default = first(spend))) %>%
  # ungroup()
  filter(min(Date)!=Date)

hc_data_cumfb %>% 
  # mutate(spend)
  hchart("area", hcaes(x = Date, y = `Daily Spend`, group = Candidate, fill = colors)) %>%
  hc_plotOptions(    area = list(
      stacking = "normal",
      lineWidth = 1,
      marker = list(enabled = FALSE)
    )) %>%
  # hc_legend(share = TRUE)%>%
  hc_colors(color_order)%>%
  hc_tooltip(
    shared = TRUE,
    positioner = JS("function (labelWidth, labelHeight, point) {
        return { x: 200, y: this.chart.plotTop };
    }")
  )



```



### Daily



```{r, out.width="100%"}

# Compute global minimum and maximum date
hc_data_dafb <- hc_data_cum_raw %>%
  mutate(Date = date_produced) %>%
  group_by(Candidate) %>%  
  arrange(Date) %>%  # Ensure the data is in the correct order
 mutate(`Daily Spend` = if_else(row_number() == 1, lead(spend) - spend, spend - lag(spend))) %>% 
  ungroup() %>% 
  filter(min(Date)!=Date)

hc_data_dafb %>% 
  # mutate(spend)
  hchart("area", hcaes(x = Date, y = `Daily Spend`, group = Candidate, fill = colors)) %>%
  hc_plotOptions(    area = list(
      stacking = "normal",
      lineWidth = 1,
      marker = list(enabled = FALSE)
    )) %>%
  # hc_legend(share = TRUE)%>%
  hc_colors(color_order)%>%
  hc_tooltip(
    shared = TRUE,
    positioner = JS("function (labelWidth, labelHeight, point) {
        return { x: 200, y: this.chart.plotTop };
    }")
  )  #%>%
   # hc_chart(events = list(load = JS("function() {
   # var chart = this;
   # chart.series[0].setVisible(false)
   # chart.series[1].setVisible(false)
   # chart.series[2].setVisible(false)
   # chart.series[3].setVisible(false)
   # chart.series[4].setVisible(false)
   # }"))) 
# hc_colors(levels(hc_data$Candidate))
# hc_colors(color_dat$colors[as.character(unique(hc_data$Candidate))])

# color_dat$colors[levels(hc_data$Candidate)]

# more_data %>% 
#   count(date_produced)
```

::: 





